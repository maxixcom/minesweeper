type: edu
custom_name: Battle!
files:
- name: src/minesweeper/Main.kt
  visible: true
  text: |
    package minesweeper

    fun main() {
        print("Hello, World!")
    }
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;

    import static java.lang.Math.abs;

    class Grid {

        char[][] rows;
        Grid(String[] rows) throws Exception {
            this.rows = new char[rows.length][];
            for (int i = 0; i < rows.length; i++) {
                this.rows[i] = rows[i].toCharArray();
                for (char c : this.rows[i]) {
                    if (c != '/'
                        && c != 'x'
                        && c != '.'
                        && c != '*'
                        && !(c >= '0' && c <= '9')) {
                        throw new Exception(
                            "A row of the grid should contain " +
                                "'/', 'X', '.' or '*' or numbers. \n" +
                                "Found: '" + c + "' in row \"" + rows[i] + "\""
                        );
                    }
                }
            }
        }

        @Override
        public String toString() {
            String res = "";
            for (int i = 0; i < this.rows.length; i++) {
                res += new String(this.rows[i]) + "\n";
            }
            return res.trim();
        }

        int count(char c) {
            int sum = 0;
            for (char[] row : rows) {
                for (char ch : row) {
                    sum += ch == c ? 1 : 0;
                }
            }
            return sum;
        }

        int countAround(int x, int y, char c) {
            int[] around = new int[] {-1, 0, 1};
            int count = 0;
            for (int dx : around) {
                for (int dy : around) {

                    int newX = x + dx;
                    int newY = y + dy;

                    if (1 <= newX && newX <= 9 &&
                        1 <= newY && newY <= 9) {
                        if (get(newX, newY) == c) {
                            count++;
                        }
                    }
                }
            }
            return count;
        }

        int distanceToCenter(int x, int y) {
            return abs(x - 5) + abs(y - 5);
        }

        void replaceAround(int x, int y, char from, char to) {
            int[] around = new int[] {-1, 0, 1};
            int count = 0;
            for (int dx : around) {
                for (int dy : around) {

                    int newX = x + dx;
                    int newY = y + dy;

                    if (1 <= newX && newX <= 9 &&
                        1 <= newY && newY <= 9) {
                        if (get(newX, newY) == from) {
                            set(newX, newY, to);
                        }
                    }
                }
            }
        }

        char get(int x, int y) {
            return rows[y-1][x-1];
        }

        void set(int x, int y, char c) {
            rows[y-1][x-1] = c;
        }

        Grid copy() {
            String[] rows = new String[this.rows.length];
            for (int i = 0; i < this.rows.length; i++) {
                rows[i] = new String(this.rows[i]);
            }
            try {
                return new Grid(rows);
            } catch (Exception ex) {
                return null;
            }
        }

        int differences(Grid other) {
            int diff = 0;
            for (int x = 1; x <= 9; x++) {
                for (int y = 1; y <= 9; y++) {
                    diff += get(x, y) != other.get(x, y) ? 1 : 0;
                }
            }
            return diff;
        }

        void checkField(boolean withRealMines) throws Exception {
            for (int x = 1; x <= 9; x++) {
                for (int y = 1; y <= 9; y++) {
                    char c = get(x, y);
                    if (!withRealMines && c == 'x') {
                        throw new Exception(
                            "The word \"failed\" was not found, " +
                                "but the last grid contains 'X' characters. " +
                                "This should not be the case."
                        );
                    }
                    if (c == '/') {
                        int dotsAround = countAround(x, y, '.');
                        if (dotsAround != 0) {
                            throw new Exception(
                                "The last grid contains '.' and '/' " +
                                    "characters that are next to each other. " +
                                    "This situation is impossible."
                            );
                        }
                        if (withRealMines) {
                            int minesAround = countAround(x, y, 'x');
                            if (minesAround != 0) {
                                throw new Exception(
                                    "The last grid contains 'X' and '/' " +
                                        "characters that are next to each other. " +
                                        "This situation is impossible."
                                );
                            }
                        }
                    }
                    if (c >= '1' && c <= '9') {
                        int num = c - '0';
                        int freePlacesAround =
                            countAround(x, y, '.') +
                                countAround(x, y, '*');

                        if (withRealMines) {
                            freePlacesAround += countAround(x, y, 'x');
                        }

                        if (num > freePlacesAround) {
                            throw new Exception(
                                "There is a number " + num + " in the last grid, " +
                                    "but there are fewer free fields " +
                                    "around which to put a mine. " +
                                    "This situation is impossible."
                            );
                        }
                    }
                    if (c == '*') {
                        int guaranteedEmptyAround = countAround(x, y, '/');
                        if (guaranteedEmptyAround != 0) {
                            throw new Exception(
                                "The last grid contains '*' and '/' " +
                                    "characters that are next to each other. " +
                                    "This situation is impossible. If there is " +
                                    "'*' character that is " +
                                    "next to '/' it should be replaced to '/' " +
                                    "or to a number."
                            );
                        }
                    }
                }
            }
        }

        void checkMiddleGame() throws Exception {
            checkField(false);
        }

        void checkFail() throws Exception {
            checkField(true);
        }

        static List<Grid> parse(String output) throws Exception {

            output = output.replaceAll("\u2502", "|");
            output = output.replaceAll("â€”", "-");

            List<Grid> grids = new LinkedList<>();
            String[] lines = output.split("\n");

            boolean gridStarted = false;
            List<String> newGrid = new LinkedList<>();
            for (String line : lines) {
                line = line.trim();
                if (line.contains("-|--")) {
                    gridStarted = !gridStarted;
                    if (gridStarted) {
                        newGrid = new LinkedList<>();
                    } else {
                        if (newGrid.size() != 9) {
                            throw new Exception(
                                "Found grid that contains " + newGrid.size() +
                                    " but grid should contain 9 lines. \n" +
                                    "The tests assume that the grid is " +
                                    "between the lines containing the line \"-\u2502--\"."
                            );
                        }
                        grids.add(
                            new Grid(newGrid.toArray(new String[0]))
                        );
                    }
                    continue;
                }
                if (gridStarted) {

                    char toFind = '|';

                    long countBrackets =
                        line.chars().filter(c -> c == toFind).count();

                    if (countBrackets != 2) {
                        throw new Exception(
                            "Grid should contain " +
                                "two '|' symbols, at the beginning " +
                                "(after row number) " +
                                "and at the end of the row. \n" +
                                "Your line: \"" + line + "\"."
                        );
                    }

                    int first = line.indexOf(toFind) + 1;
                    int second = line.indexOf(toFind, first);

                    int rowSize = second - first;

                    if (rowSize != 9) {
                        throw new Exception(
                            "Every row of the grid should contain " +
                                "9 symbols between '|' chars. \nThis line has " +
                                rowSize + " symbols: \"" + line + "\"."
                        );
                    }

                    String row = line.substring(first, second);

                    newGrid.add(row);
                }
            }

            return grids;
        }

    }

    class Coords {
        int x;
        int y;
        Coords(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    enum FirstPressStatus {
        NOT_PRESSED_FREE, PRESSED_FREE, VERIFIED_OK
    }

    enum Action {
        NONE, MINE, FREE
    }

    class State {
        int minesCount = 0;
        FirstPressStatus isStart = FirstPressStatus.NOT_PRESSED_FREE;
        List<Coords> marks = new ArrayList<>();

        int actionX = 0;
        int actionY = 0;
        Action lastAction = Action.NONE;
        char lastCharAtCoords = '\0';
        String fullAction = null;
    }

    public class MinesweeperTest extends StageTest<State> {

        @Override
        public List<TestCase<State>> generate() {
            List<TestCase<State>> tests = new ArrayList<>();

            for (int i = 1; i < 70; i += i < 10 ? 1 : 5) {
                for (int j = 0; j < (i < 5 ? 20 : 2); j++) {
                    State state = new State();
                    state.minesCount = i;
                    tests.add(new TestCase<State>()
                        .addInput("" + i)
                        .addInfInput(out -> createDynamicInput(out, state))
                        .setAttach(state)
                    );
                }
            }
            return tests;
        }

        private Object createDynamicInput(String out, State state) {
            out = out.trim().toLowerCase();

            List<Grid> grids;
            try {
                grids = Grid.parse(out);
            } catch (Exception ex) {
                return CheckResult.wrong(ex.getMessage());
            }

            if (grids.size() == 0) {
                return CheckResult.wrong(
                    "Cannot find a field after the last input. Make sure you output " +
                        "this field using '|' and '-' characters."
                );
            }

            Grid grid = grids.get(0);

            state.marks.removeIf(elem -> {
                char c = grid.get(elem.x, elem.y);
                boolean isGuaranteedEmptyNow = c == '/';
                boolean isNumberNow = c >= '1' && c <= '9';
                boolean isFailed = c == 'x';
                return isGuaranteedEmptyNow || isNumberNow || isFailed;
            });

            boolean isFailed = out.contains("failed");
            boolean isWin = out.contains("congratulations");

            int starCount = grid.count('*');
            int shouldBeStars = state.marks.size();
            if (starCount != shouldBeStars && !isFailed && !isWin) {
                return CheckResult.wrong(
                    "There should be " + shouldBeStars + " '*' " +
                        "symbol" + (starCount > 1? "s": "") + " in the last " +
                        "grid. Found: " + starCount
                );
            }

            if (state.lastAction != Action.NONE) {
                int x = state.actionX;
                int y = state.actionY;
                int oldCell = state.lastCharAtCoords;
                int newCell = grid.get(x, y);

                if (oldCell == newCell) {
                    return CheckResult.wrong(
                        "Grid's cell at coordinates \"" + x + " " + y + "\" " +
                            "didn't changed after action \"" + state.fullAction + "\"");
                }

                if (state.lastAction == Action.MINE) {
                    if (oldCell == '.' && newCell != '*') {
                        return CheckResult.wrong(
                            "Grid's cell at coordinates \"" + x + " " + y + "\" " +
                                "should be equal to \"*\"");
                    } else if (oldCell == '*' && newCell != '.') {
                        return CheckResult.wrong(
                            "Grid's cell at coordinates \"" + x + " " + y + "\" " +
                                "should be equal to \".\"");
                    }

                } else if (state.lastAction == Action.FREE) {
                    if (newCell != '/' && newCell != 'x' && !(newCell >= '0' && newCell <= '9')) {
                        return CheckResult.wrong(
                            "Grid's cell at coordinates \"" + x + " " + y + "\" " +
                                "should be equal to \"x\", \"/\" or to a number");
                    }
                }
            }

            if (isFailed) {
                if (state.isStart != FirstPressStatus.VERIFIED_OK) {
                    return CheckResult.wrong(
                        "The user should not lose after the first \"free\" move."
                    );
                }
                try {
                    grid.checkFail();
                    int minesCount = grid.count('x');
                    if (minesCount != state.minesCount) {
                        return CheckResult.wrong(
                            "There " + (minesCount > 1? "are" : "is") +
                                " " + minesCount + " mine" + (minesCount > 1? "s": "") +
                                " in the last grid marked 'X'. " +
                                "But initially the user " +
                                "entered " + state.minesCount + " mine" +
                                (state.minesCount > 1? "s": "") +". " +
                                "Every real mine should be marked as 'X' at the end " +
                                "in case of failure."
                        );
                    }
                    return CheckResult.correct();
                } catch (Exception ex) {
                    return CheckResult.wrong(ex.getMessage());
                }
            }

            if (state.isStart == FirstPressStatus.PRESSED_FREE) {
                state.isStart = FirstPressStatus.VERIFIED_OK;
            }

            try {
                grid.checkMiddleGame();
            } catch (Exception ex) {
                return CheckResult.wrong(ex.getMessage());
            }

            if (isWin) {
                int freeCellsCount = grid.count('.') + grid.count('*');
                if (freeCellsCount != state.minesCount &&
                    state.marks.size() != state.minesCount) {
                    return CheckResult.wrong(
                        "The word \"congratulations\" was found, " +
                            "but not every mine was found. \n" +
                            "Mines to find: " + state.minesCount + "\n" +
                            "Free cells left: " + freeCellsCount

                    );
                }
                return CheckResult.correct();
            }

            Random random = new Random();

            int dotsCount = grid.count('.');

            if (starCount != 0 && (random.nextInt(4) == 0 || dotsCount == 0)) {
                int nextMine = random.nextInt(state.marks.size());
                Coords mineToRemove = state.marks.get(nextMine);
                state.marks.remove(mineToRemove);
                int x = mineToRemove.x;
                int y = mineToRemove.y;

                String fullAction = x + " " + y + " mine";

                state.actionX = x;
                state.actionY = y;
                state.lastAction = Action.MINE;
                state.lastCharAtCoords = grid.get(x, y);
                state.fullAction = fullAction;
                return fullAction;
            }

            if (dotsCount == 0) {
                return CheckResult.wrong(
                    "There are no '.' cells in the field, " +
                        "but the game is not over. Something is wrong."
                );
            }

            while (true) {
                int x = 1 + random.nextInt(9);
                int y = 1 + random.nextInt(9);

                char c = grid.get(x, y);
                if (c == '.') {
                    boolean isMine = random.nextInt(3) == 0;
                    if (isMine) {
                        state.marks.add(new Coords(x, y));

                        String fullAction = x + " " + y + " mine";

                        state.actionX = x;
                        state.actionY = y;
                        state.lastAction = Action.MINE;
                        state.lastCharAtCoords = '.';
                        state.fullAction = fullAction;
                        return fullAction;
                    } else {
                        if (state.isStart == FirstPressStatus.NOT_PRESSED_FREE) {
                            state.isStart = FirstPressStatus.PRESSED_FREE;
                        }

                        String fullAction = x + " " + y + " free";

                        state.actionX = x;
                        state.actionY = y;
                        state.lastAction = Action.FREE;
                        state.lastCharAtCoords = '.';
                        state.fullAction = fullAction;
                        return fullAction;
                    }
                }
            }
        }

        @Override
        public CheckResult check(String reply, State attach) {
            reply = reply.toLowerCase();

            try {
                List<Grid> grids = Grid.parse(reply);
                if (grids.size() <= 1) {
                    return CheckResult.wrong(
                        "You should output at least 2 grids, found " + grids.size());
                }
            } catch (Exception ex) {
                return CheckResult.wrong(ex.getMessage());
            }

            boolean isFailed = reply.contains("failed");
            boolean isWin = reply.contains("congratulations");

            if (!isFailed && !isWin) {
                return CheckResult.wrong(
                    "No words " +
                        "\"congratulations\" or \"failed\" were found. " +
                        "The program must end in one of these ways."
                );
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/minesweeper/domain/utils/CoordinatesExt.kt
  visible: true
  text: |
    package minesweeper.domain.utils

    import minesweeper.domain.entity.Coordinates

    fun Coordinates.neighbors(): List<Coordinates> =
        (-1..1).flatMap { dx ->
            (-1..1).map { dy ->
                Coordinates(x + dx, y + dy)
            }
        }.filter { it != this }
  learner_created: true
- name: src/minesweeper/domain/entity/Board.kt
  visible: true
  text: |
    package minesweeper.domain.entity

    class Board(val width: Int = 9, val height: Int = 9) {
        val data = List<MutableList<CellType>>(height) {
            MutableList(width) {
                CellType.Empty
            }
        }
    }
  learner_created: true
- name: src/minesweeper/domain/utils/GameExt.kt
  visible: true
  text: |
    package minesweeper.domain.utils

    import minesweeper.domain.entity.CellType
    import minesweeper.domain.entity.Coordinates
    import minesweeper.domain.entity.Game

    fun Game.plantMines() = mines.forEach { board.plant(it, CellType.Mine) }

    fun Game.hintMines() {
        val hintPoints = mutableSetOf<Coordinates>()

        plantMines()

        for (m in mines) {
            board.validCellNeighbors(m)
                .map {
                    it
                }
                .filter { board.cellType(it) == CellType.Empty }
                .forEach { hintPoints.add(it) }
        }

        hintPoints.forEach { cell ->
            val n = board.validCellNeighbors(cell).count { board.cellType(it) == CellType.Mine }
            board.plant(cell, CellType.Hint(n))
        }

        hideMines()
    }

    fun Game.hideMines() = mines.forEach { board.plant(it, CellType.Empty) }
  learner_created: true
- name: src/minesweeper/domain/AppRunner.kt
  visible: true
  text: |
    package minesweeper.domain

    interface AppRunner : Runnable
  learner_created: true
- name: src/minesweeper/console/ConsoleRunner.kt
  visible: true
  text: |
    package minesweeper.console

    import minesweeper.domain.AppRunner
    import minesweeper.domain.entity.CellType
    import minesweeper.domain.services.GameService
    import minesweeper.domain.utils.cellType

    class ConsoleRunner : AppRunner {
        private val gameService: GameService = Application.gameService
        override fun run() {
            val numberOfMines = readNumberOfMines()

            val game = gameService.createGame(9, 9, numberOfMines)

            while (true) {
                game.board.print()
                val coordinates = readPlayerInput { c ->
                    if (game.board.cellType(c) is CellType.Hint) {
                        println("There is a number here!")
                        false
                    } else {
                        true
                    }
                }
                gameService.playerMarksMine(game, coordinates)
                if (gameService.areAllMinesFound(game)) {
                    game.board.print()
                    printAllMinesFound()
                    break
                }
            }
        }
    }
  learner_created: true
- name: src/minesweeper/domain/entity/Coordinates.kt
  visible: true
  text: |
    package minesweeper.domain.entity

    data class Coordinates(val x: Int, val y: Int)
  learner_created: true
- name: src/minesweeper/domain/services/GameService.kt
  visible: true
  text: |
    package minesweeper.domain.services

    import minesweeper.domain.entity.Coordinates
    import minesweeper.domain.entity.Game

    interface GameService {
        fun createGame(width: Int, height: Int, numberOfMines: Int): Game
        fun playerMarksMine(game: Game, coordinate: Coordinates)
        fun areAllMinesFound(game: Game): Boolean
    }
  learner_created: true
- name: src/minesweeper/domain/entity/Game.kt
  visible: true
  text: |
    package minesweeper.domain.entity

    data class Game(
        val mines: List<Coordinates>,
        val board: Board,
        val marks: MutableList<Coordinates> = mutableListOf(),
    )
  learner_created: true
- name: src/minesweeper/domain/entity/CellType.kt
  visible: true
  text: |
    package minesweeper.domain.entity

    sealed class CellType(val character: Char) {
        object Empty : CellType('.')
        object Mine : CellType('X')
        class Hint(digit: Int) : CellType(digit.toString().first())
        object Mark : CellType('*')
    }
  learner_created: true
- name: src/minesweeper/app/services/GameServiceImpl.kt
  visible: true
  text: |
    package minesweeper.app.services

    import minesweeper.domain.entity.Board
    import minesweeper.domain.entity.CellType
    import minesweeper.domain.entity.Coordinates
    import minesweeper.domain.entity.Game
    import minesweeper.domain.services.GameService
    import minesweeper.domain.utils.cellType
    import minesweeper.domain.utils.hideMines
    import minesweeper.domain.utils.hintMines
    import minesweeper.domain.utils.plant
    import kotlin.random.Random

    class GameServiceImpl : GameService {
        override fun createGame(width: Int, height: Int, numberOfMines: Int): Game {
            val game = Game(
                board = Board(width, height),
                mines = this.createMines(width, height, numberOfMines),
            )
            game.hintMines()
            game.hideMines()

            return game
        }

        override fun playerMarksMine(game: Game, coordinate: Coordinates) {
            when (game.board.cellType(coordinate)) {
                is CellType.Mark -> {
                    game.marks.remove(coordinate)
                    game.board.plant(coordinate, CellType.Empty)
                }
                is CellType.Empty -> {
                    game.marks.add(coordinate)
                    game.board.plant(coordinate, CellType.Mark)
                }
                else -> {
                }
            }
        }

        override fun areAllMinesFound(game: Game): Boolean =
            game.mines.size == game.marks.size && game.mines.containsAll(game.marks)

        private fun createMines(width: Int, height: Int, number: Int): List<Coordinates> {
            val randomGenerator = Random.Default
            val n = number.coerceIn(0..width * height)
            var placed = 0
            val mines = mutableListOf<Coordinates>()
            while (placed != n) {
                val coordinate = Coordinates(
                    x = randomGenerator.nextInt(0, width),
                    y = randomGenerator.nextInt(0, height)
                )
                if (coordinate in mines) {
                    continue
                }
                mines.add(coordinate)
                placed++
            }
            return mines
        }
    }
  learner_created: true
- name: src/minesweeper/console/Application.kt
  visible: true
  text: |-
    package minesweeper.console

    import minesweeper.app.services.GameServiceImpl
    import minesweeper.domain.services.GameService

    object Application {
        val gameService: GameService = GameServiceImpl()
    }
  learner_created: true
- name: src/minesweeper/console/ConsoleHelpers.kt
  visible: true
  text: |
    package minesweeper.console

    import minesweeper.domain.entity.Board
    import minesweeper.domain.entity.Coordinates

    fun readNumberOfMines(): Int {
        println("How many mines do you want on the field?")
        return readLine()!!.toInt()
    }

    fun readPlayerInput(validator: (c: Coordinates) -> Boolean): Coordinates {
        val regex = "^\\s*(?<x>\\d+)\\s+(?<y>\\d+)\\s*$".toRegex()
        while (true) {
            println("Set/delete mine marks (x and y coordinates):")
            val coordinates = regex.matchEntire(readLine()!!)?.let {
                Coordinates(
                    x = it.groups["x"]!!.value.toInt() - 1,
                    y = it.groups["y"]!!.value.toInt() - 1,
                )
            }
            if (coordinates != null) {
                if (validator(coordinates)) {
                    return coordinates
                }
            } else {
                println("Invalid input")
            }
        }
    }

    fun printAllMinesFound() {
        println("Congratulations! You found all the mines!")
    }

    fun Board.print() {
        println(List(width) { it + 1 }.joinToString(separator = "", prefix = " â”‚", postfix = "â”‚"))
        println(List(width) { "â€”" }.joinToString("", prefix = "â€”â”‚", postfix = "â”‚"))
        data.forEachIndexed { indexRow, row ->
            println(
                row.map { cell ->
                    cell.character
                }.joinToString("", prefix = "${indexRow + 1}â”‚", postfix = "â”‚")
            )
        }
        println(List(width) { "â€”" }.joinToString("", prefix = "â€”â”‚", postfix = "â”‚"))
    }
  learner_created: true
- name: src/minesweeper/domain/utils/BoardExt.kt
  visible: true
  text: |
    package minesweeper.domain.utils

    import minesweeper.domain.entity.Board
    import minesweeper.domain.entity.CellType
    import minesweeper.domain.entity.Coordinates

    fun Board.validCellNeighbors(c: Coordinates): List<Coordinates> =
        c.neighbors()
            .filter { it.x >= 0 && it.y >= 0 && it.x < width && it.y < height }
            .filter { it != c }

    fun Board.plant(cell: Coordinates, cellType: CellType) {
        data[cell.y][cell.x] = cellType
    }

    fun Board.cellType(cell: Coordinates) = data[cell.y][cell.x]

    fun Board.plantMines(mines: List<Coordinates>) =
        mines.forEach { plant(it, CellType.Mine) }

    fun Board.hintMines(mines: List<Coordinates>) {
        val hintPoints = mutableSetOf<Coordinates>()

        for (m in mines) {
            validCellNeighbors(m)
                .map {
                    it
                }
                .filter { cellType(it) == CellType.Empty }
                .forEach { hintPoints.add(it) }
        }

        hintPoints.forEach { cell ->
            val n = validCellNeighbors(cell).count { cellType(it) == CellType.Mine }
            plant(cell, CellType.Hint(n))
        }
    }
  learner_created: true
- name: src/minesweeper/console/input/InputCommand.kt
  visible: true
  learner_created: true
- name: src/minesweeper/console/input/FreeCommand.kt
  visible: true
  learner_created: true
- name: src/minesweeper/console/input/MineCommand.kt
  visible: true
  learner_created: true
- name: src/minesweeper/console/input/EndCommand.kt
  visible: true
  learner_created: true
- name: src/minesweeper/domain/exceptions/StepOnMineException.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/8/stages/469/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 07 Oct 2021 16:00:20 UTC
record: -1
